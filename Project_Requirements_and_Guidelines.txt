Document Project_Requirements_and_Guidelines.txt

1. STATEMENT OF PURPOSE  
------------------------  
- The purpose of this document is to ensure quality and compliance with specific requirements, including Joomla development standards, coding guidelines, and industry best practices.  
- It establishes a framework for clear collaboration and high-quality deliverables.  
- For clarity, the following terms are used throughout this document:  
  - Owner: Refers to Emil Appelkvist, the project owner and client.  
  - Developer: Refers to the individual or team responsible for performing the agreed development work.
  - Repository: Refers to the private GitHub repository created and managed by the Owner.  
  - Project: Refers to the specific work scope and deliverables defined for the development task.  


2. REQUIREMENTS
---------------
2.1 Compliance with Standards:  
- All development work must adhere to Joomla’s official coding standards and guidelines as outlined in:  
  - Joomla Coding Standards https://developer.joomla.org/coding-standards/introduction.html
  - Joomla Framework Documentation https://framework.joomla.org/
  - Joomla API Documentation https://api.joomla.org/
  - Joomla Developer’s Guide https://docs.joomla.org/Developers
  - Joomla Security Best Practices https://docs.joomla.org/Category:Security
  - Joomla Template Development https://docs.joomla.org/Creating_a_template_for_Joomla
- The use of Joomla’s native APIs, MVC structure, and language file support is mandatory for consistency and compatibility.

2.2 Recommendations and Specifications:  
- The project-specific work description and this document complement each other. In case of conflicting requirements, the following priority applies:  
  1. Project-specific work description.  
  2. This document, including linked and attached references.

2.3 Code and Quality  
- Code must be well-structured and self-explanatory wherever possible (e.g., use meaningful variable names, functions, and logical organization).  
- Include clear and concise comments to explain non-obvious logic, algorithms, or complex sections of code. Comments should:  
  - State the purpose of the code or logic.  
  - Highlight any assumptions, dependencies, or edge cases.  
  - Reference related files, overrides, or external libraries if applicable.  
- Unsupported or deprecated libraries and components should only be used if explicitly approved by the project owner (Emil Appelkvist).
- Third-party extensions or libraries must be carefully evaluated for quality, support, and compatibility with Joomla’s ecosystem, with final decisions made in agreement with the project owner (Emil Appelkvist).  

2.4 Joomla Overrides and Customizations  
- Leverage Joomla's powerful override system for views, templates, and designs to maintain compatibility during updates.  
- Place overrides in `templates/[your-template]/html/` rather than modifying core files or components.  
- Use overrides for custom views and ensure changes are documented for clarity.  

2.5 Upgrade-Friendliness  
- Ensure all customizations, including modules and components, are upgrade-friendly and avoid altering Joomla's core structure.  

2.6 CSS and Styling  
- Place custom CSS in `templates/[your-template]/css/` and avoid inline styles or direct modifications to Joomla’s core files.  
- Maintain specificity in CSS selectors to prevent style conflicts while respecting Joomla’s default styles.  

2.7 Media and File Organization  
- Store media files (e.g., images, fonts, JavaScript) in the template folder’s appropriate directories (e.g., `images/`, `media/`).  
- Avoid placing custom assets in Joomla's core directories to simplify maintenance and updates.

3. DOCUMENTATION
----------------

3.1 Project Setup and Workflow  
- The project owner creates a private GitHub repository and invites the developer to collaborate.  
- All project files must be managed within the GitHub repository.  
- Work should be committed and pushed to GitHub regularly, with clear and concise commit messages.  
- A `development` branch will be used for ongoing work, while the `main` branch will contain the stable, production-ready code. Pull requests (PRs) must be used for merging any changes to the `main` branch.

3.2 Branching and Commits  
- The developer should create feature branches for individual tasks and commit changes to those branches.  
- All commits should follow the format:  
  - A brief message describing the change.  
  - Reference the related issue (e.g., "Fixes #123").  
  - A detailed explanation if necessary (for complex changes).  
- Do not commit directly to the main or development branches. Instead, create a pull request to propose changes. These branches are protected to ensure that all changes are reviewed and approved before integration.

3.3 Pull Requests and Review  
- Pull requests (PRs) are used to merge changes into the `main` branch. PRs should be reviewed by the project owner (Emil Appelkvist) for approval before merging.  
- All changes must be well-documented, tested, and pass quality checks (including automated tests) before being merged.

3.4 Issue Tracking  
- All bugs and issues must be documented in GitHub Issues.  
- Each issue should have a clear description, steps to reproduce (if applicable), and be assigned to the appropriate developer.

3.5 GitHub Guidelines  
- Follow the GitHub Guides and best practices for branching, commits, and pull requests:  
  - GitHub Flow: https://guides.github.com/introduction/flow/  
  - GitHub Docs: https://docs.github.com/en/github

4. QUALITY ASSURANCE

4.1 Testing:  
- The developer is responsible for creating and executing a test plan, tailored to the project's size and complexity. All tests should be documented and automated where possible. 
- Testing should cover functional, integration, and simulated user acceptance tests, where the latter involves replicating user interactions to ensure usability and expected behavior.

4.2 Bug Management:  
- Bugs found during testing should be documented in GitHub Issues and assigned to the relevant developer for resolution.

5. POINTS OF CONTACT
--------------------
- Communication must be in English or Swedish.  
- Key questions and reporting should be logged in the issue management system.
- General discussions may take place via Freelancer.com, Skype, or another agreed-upon platform.

6. PAYMENTS
-----------
- Payments will be made according to the agreement.  
- Work is subject to review, and payment will only be issued once the work has been approved. A quality expert may assist in the review.

7. WARRANTY AND RESPONSIBILITY
------------------------------
- The developer guarantees a bug-free product.  
- Any bugs or errors caused by the developer, discovered within the warranty period (2 months), must be resolved at no additional cost. This excludes issues arising from misuse, changes made by third 
  parties, or updates to Joomla or third-party extensions outside the developer's control.

8. NON-DISCLOSURE AGREEMENT (NDA)
---------------------------------
- All information, code, and assets shared during the project are strictly confidential and may not be shared, disclosed, or used outside the scope of this project without written consent from the owner.  
- The developer agrees to securely handle all data and ensure it is not accessible to unauthorized parties.  
- This clause remains in effect indefinitely, even after project completion.

9. OWNERSHIP
------------
- All intellectual property created as part of the project belongs solely to the owner.  
- All files created as part of the project must include the following metadata at the top of the file:

/*
* @version        x.X.X
* @copyright      Emil Appelkvist, Nyköping, Sweden
* @owner          Emil Appelkvist, Nyköping, Sweden
* @author         [Developer Name], [Company], [Email]
* @license        Proprietary software
*/

10. TIME AND REPORTING
----------------------
10.1 Timeline:  
- Project deadlines and milestones will be defined in the project-specific work description.  
- Delays must be communicated promptly, and new timelines agreed upon if needed.

10.2 Reporting:  
- The developer must submit regular reports (e.g., every Tuesday and Friday), including:  
  - Work completed since the last report.  
  - Total hours spent on the project (if payment is hourly).  
  - Questions requiring urgent answers.  
  - Next steps and any blockers.
